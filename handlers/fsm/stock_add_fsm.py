# your_bot/handlers/fsm/stock_add_fsm.py
# FSM –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—Ç–∫–∞ (—Å–≤—è–∑–∏ —Ç–æ–≤–∞—Ä-–ª–æ–∫–∞—Ü–∏—è)

import logging
import math
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from typing import Union

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
from utils import db

# –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö FSM —É—Ç–∏–ª–∏—Ç –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from .fsm_utils import CANCEL_FSM_CALLBACK, CONFIRM_ACTION_CALLBACK, generate_pagination_keyboard, PAGINATION_CALLBACK_PREFIX

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä–∞ –≤ ADD FSM
STOCK_PRODUCT_PAGE_CALLBACK_PREFIX_ADD = "add_stock_prod_page:"
SELECT_STOCK_PRODUCT_CALLBACK_PREFIX_ADD = "add_stock_prod_sel:"
STOCK_LOCATION_PAGE_CALLBACK_PREFIX_ADD = "add_stock_loc_page:"
SELECT_STOCK_LOCATION_CALLBACK_PREFIX_ADD = "add_stock_loc_sel:"

# –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
STOCK_PAGE_SIZE_ADD = 10

# --- FSM States ---
class StockAddFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞."""
    waiting_for_product_selection = State()
    waiting_for_location_selection = State()
    waiting_for_quantity = State()
    confirm_add = State()

# --- Handlers ---
async def start_stock_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞."""
    await callback_query.answer()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    await state.clear()

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
    all_products = db.get_all_products()
    if not all_products:
        await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM, —Ç.–∫. –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ —Ç–æ–≤–∞—Ä–∞
        await callback_query.message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∫–æ–ª–±—ç–∫
            "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±–µ–∑ —Ç–æ–≤–∞—Ä–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏'."
        )
        from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
        await show_admin_main_menu_aiogram(callback_query, state)
        return

    await state.update_data(available_products_add=all_products, product_page_add=0)
    await state.set_state(StockAddFSM.waiting_for_product_selection)
    await show_stock_product_selection_add(callback_query, state)


async def show_stock_product_selection_add(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å—Ç–∞—Ç–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (ADD FSM)."""
    user_data = await state.get_data()
    products = user_data.get("available_products_add", [])
    current_page = user_data.get("product_page_add", 0)

    if not products: # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–∞–Ω–µ–µ
         await state.clear()
         text = "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±–µ–∑ —Ç–æ–≤–∞—Ä–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä."
         if isinstance(target, types.CallbackQuery):
             await target.message.edit_text(text)
             from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
             await show_admin_main_menu_aiogram(target, state)
         else:
              await target.answer(text)
         return

    def format_product_button_text(product: db.Product) -> str:
         # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è MarkdownV2
         name_esc = types.utils.markdown.text_decorations.escape_markdown(product.name)
         return f"üìö {name_esc} (ID: {product.id})"

    reply_markup = generate_pagination_keyboard(
        items=products,
        current_page=current_page,
        page_size=STOCK_PAGE_SIZE_ADD,
        select_callback_prefix=SELECT_STOCK_PRODUCT_CALLBACK_PREFIX_ADD,
        pagination_callback_prefix=f"{PAGINATION_CALLBACK_PREFIX}{STOCK_PRODUCT_PAGE_CALLBACK_PREFIX_ADD.strip(':')}:",
        item_text_func=format_product_button_text,
        item_id_func=lambda p: p.id
    )

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}):"

    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=reply_markup)
    else:
        await target.answer(text, reply_markup=reply_markup)


async def process_stock_product_selection_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: {prefix}{id} -> "add_stock_prod_sel:123"
    try:
        action, product_id_str = data.split(":")
        product_id = int(product_id_str)
    except ValueError:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –≤ add stock FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞.")
        await show_stock_product_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return


    selected_product = db.get_product_by_id(product_id)
    if not selected_product:
        await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await show_stock_product_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    await state.update_data(product_id=product_id, product_name=selected_product.name)
    await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: `{types.utils.markdown.text_decorations.escape_markdown(selected_product.name)}`.", parse_mode="MarkdownV2")


    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    await state.set_state(StockAddFSM.waiting_for_location_selection)
    all_locations = db.get_all_locations()
    if not all_locations:
         await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM
         await callback_query.message.answer(
            "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏'."
         )
         from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
         await show_admin_main_menu_aiogram(callback_query, state)
         return

    await state.update_data(available_locations_add=all_locations, location_page_add=0)
    await show_stock_location_selection_add(callback_query, state)


async def process_stock_product_pagination_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "page:{entity_prefix}:{page_number}" -> "page:add_stock_prod:{page_number}"
    parts = data.split(":")
    if len(parts) != 3 or parts[0] != PAGINATION_CALLBACK_PREFIX.strip(':') or parts[1] != STOCK_PRODUCT_PAGE_CALLBACK_PREFIX_ADD.strip(':'):
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ add stock FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        await show_stock_product_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞
        return


    new_page = int(parts[2])

    user_data = await state.get_data()
    products = user_data.get("available_products_add", [])
    total_pages = math.ceil(len(products) / STOCK_PAGE_SIZE_ADD)

    if 0 <= new_page < total_pages:
        await state.update_data(product_page_add=new_page)
        await show_stock_product_selection_add(callback_query, state)
    else:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")


async def show_stock_location_selection_add(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å—Ç–∞—Ç–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (ADD FSM)."""
    user_data = await state.get_data()
    locations = user_data.get("available_locations_add", [])
    current_page = user_data.get("location_page_add", 0)

    if not locations: # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–∞–Ω–µ–µ
         await state.clear()
         text = "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
         if isinstance(target, types.CallbackQuery):
             await target.message.edit_text(text)
             from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
             await show_admin_main_menu_aiogram(target, state)
         else:
              await target.answer(text)
         return

    def format_location_button_text(location: db.Location) -> str:
         # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è MarkdownV2
         name_esc = types.utils.markdown.text_decorations.escape_markdown(location.name)
         return f"üìç {name_esc} (ID: {location.id})"


    reply_markup = generate_pagination_keyboard(
        items=locations,
        current_page=current_page,
        page_size=STOCK_PAGE_SIZE_ADD,
        select_callback_prefix=SELECT_STOCK_LOCATION_CALLBACK_PREFIX_ADD,
        pagination_callback_prefix=f"{PAGINATION_CALLBACK_PREFIX}{STOCK_LOCATION_PAGE_CALLBACK_PREFIX_ADD.strip(':')}:",
        item_text_func=format_location_button_text,
        item_id_func=lambda l: l.id
    )

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}):"

    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=reply_markup)
    else:
        await target.answer(text, reply_markup=reply_markup)


async def process_stock_location_selection_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: {prefix}{id} -> "add_stock_loc_sel:123"
    try:
        action, location_id_str = data.split(":")
        location_id = int(location_id_str)
    except ValueError:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –≤ add stock FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")
        await show_stock_location_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    selected_location = db.get_location_by_id(location_id)
    if not selected_location:
        await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await show_stock_location_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    await state.update_data(location_id=location_id, location_name=selected_location.name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await state.set_state(StockAddFSM.waiting_for_quantity)
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –¥–ª—è MarkdownV2
    prod_name_esc = types.utils.markdown.text_decorations.escape_markdown(await state.get_data("product_name"))
    loc_name_esc = types.utils.markdown.text_decorations.escape_markdown(await state.get_data("location_name"))

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ `{prod_name_esc}` –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ `{loc_name_esc}`:",
        parse_mode="MarkdownV2"
    )

async def process_stock_location_pagination_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "page:{entity_prefix}:{page_number}" -> "page:add_stock_loc:{page_number}"
    parts = data.split(":")
    if len(parts) != 3 or parts[0] != PAGINATION_CALLBACK_PREFIX.strip(':') or parts[1] != STOCK_LOCATION_PAGE_CALLBACK_PREFIX_ADD.strip(':'):
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–∏ –≤ add stock FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        await show_stock_location_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞
        return

    new_page = int(parts[2])

    user_data = await state.get_data()
    locations = user_data.get("available_locations_add", [])
    total_pages = math.ceil(len(locations) / STOCK_PAGE_SIZE_ADD)

    if 0 <= new_page < total_pages:
        await state.update_data(location_page_add=new_page)
        await show_stock_location_selection_add(callback_query, state)
    else:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")


async def process_stock_quantity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–∞ (ADD FSM)."""
    quantity_str = message.text.strip()
    user_data = await state.get_data()
    prod_name_esc = types.utils.markdown.text_decorations.escape_markdown(user_data.get("product_name", "N/A"))
    loc_name_esc = types.utils.markdown.text_decorations.escape_markdown(user_data.get("location_name", "N/A"))

    try:
        quantity = int(quantity_str)
        if quantity < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ StockAddFSM.waiting_for_quantity
            return
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ StockAddFSM.waiting_for_quantity
        return

    await state.update_data(quantity=quantity)
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ: `{quantity}` —à—Ç.", parse_mode="MarkdownV2")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await show_stock_confirm_add(message, state)


async def show_stock_confirm_add(target: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ (ADD FSM)."""
    user_data = await state.get_data()
    product_name = user_data.get("product_name")
    location_name = user_data.get("location_name")
    quantity = user_data.get("quantity")

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è MarkdownV2
    prod_name_esc = types.utils.markdown.text_decorations.escape_markdown(product_name)
    loc_name_esc = types.utils.markdown.text_decorations.escape_markdown(location_name)
    quantity_esc = types.utils.markdown.text_decorations.escape_markdown(str(quantity))


    text = (
        "‚ú® **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –û—Å—Ç–∞—Ç–∫–∞** ‚ú®\n\n"
        f"**–¢–æ–≤–∞—Ä:** `{prod_name_esc}`\n"
        f"**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** `{loc_name_esc}`\n"
        f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** `{quantity_esc}` —à—Ç.\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ."
    )

    keyboard = [
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=CONFIRM_ACTION_CALLBACK)],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CANCEL_FSM_CALLBACK)],
    ]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º target.answer, —Ç.–∫. –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –±—ã–ª message.register
    await target.answer(text, reply_markup=reply_markup, parse_mode="MarkdownV2")
    await state.set_state(StockAddFSM.confirm_add)


async def process_stock_confirm_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ (ADD FSM)."""
    await callback_query.answer()
    user_data = await state.get_data()
    product_id = user_data.get("product_id")
    location_id = user_data.get("location_id")
    quantity = user_data.get("quantity")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ utils/db.py
    # –§—É–Ω–∫—Ü–∏—è add_stock –≤–µ—Ä–Ω–µ—Ç None, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    new_stock_item = db.add_stock(
        product_id=product_id,
        location_id=location_id,
        quantity=quantity
    )

    if new_stock_item:
        await callback_query.message.edit_text(
            "üéâ **–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!** üéâ\n"
            f"**–¢–æ–≤–∞—Ä ID:** `{new_stock_item.product_id}`\n"
            f"**–õ–æ–∫–∞—Ü–∏—è ID:** `{new_stock_item.location_id}`\n"
            f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** `{new_stock_item.quantity}` —à—Ç."
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞.**\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ)." # TODO: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        )

    await state.clear() # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
    await show_admin_main_menu_aiogram(callback_query, state)


# --- Router Registration ---
def register_stock_add_handlers(router: Router):
    # ENTRY POINT
    router.callback_query.register(start_stock_add, F.data == "stock_add_action") # –ù–∞—á–∞–ª–æ FSM

    # Handlers for product selection/pagination
    router.callback_query.register(
        process_stock_product_selection_add,
        StockAddFSM.waiting_for_product_selection,
        F.data.startswith(SELECT_STOCK_PRODUCT_CALLBACK_PREFIX_ADD)
    )
    router.callback_query.register(
        process_stock_product_pagination_add,
        StockAddFSM.waiting_for_product_selection,
        F.data.startswith(f"{PAGINATION_CALLBACK_PREFIX}{STOCK_PRODUCT_PAGE_CALLBACK_PREFIX_ADD.strip(':')}")
    )

    # Handlers for location selection/pagination
    router.callback_query.register(
        process_stock_location_selection_add,
        StockAddFSM.waiting_for_location_selection,
        F.data.startswith(SELECT_STOCK_LOCATION_CALLBACK_PREFIX_ADD)
    )
    router.callback_query.register(
        process_stock_location_pagination_add,
        StockAddFSM.waiting_for_location_selection,
        F.data.startswith(f"{PAGINATION_CALLBACK_PREFIX}{STOCK_LOCATION_PAGE_CALLBACK_PREFIX_ADD.strip(':')}")
    )

    # Handler for quantity input
    router.message.register(process_stock_quantity, StockAddFSM.waiting_for_quantity)

    # Confirmation handler
    router.callback_query.register(process_stock_confirm_add, StockAddFSM.confirm_add, F.data == CONFIRM_ACTION_CALLBACK)

    # –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

#!/usr/bin/env python
# -*- coding: utf-8 -*-

# your_bot/handlers/fsm/product_update_fsm.py
# FSM –¥–∏–∞–ª–æ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞

import logging
import math
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from typing import Union, Optional, List
from decimal import Decimal # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–µ–Ω—å–≥–∞–º–∏

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from utils import db

# –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö FSM —É—Ç–∏–ª–∏—Ç –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from .fsm_utils import (
    CANCEL_FSM_CALLBACK, CONFIRM_ACTION_CALLBACK, generate_pagination_keyboard,
    PAGINATION_CALLBACK_PREFIX, SKIP_INPUT_MARKER
)
# –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from ..admin_constants_aiogram import (
    PRODUCT_UPDATE_INIT_CALLBACK_PREFIX, UPDATE_PROD_CAT_PAGE_PREFIX,
    UPDATE_PROD_CAT_SEL_PREFIX, KEEP_CURRENT_CATEGORY_CALLBACK,
    UPDATE_PROD_MAN_PAGE_PREFIX, UPDATE_PROD_MAN_SEL_PREFIX,
    KEEP_CURRENT_MANUFACTURER_CALLBACK
)

# –ò–º–ø–æ—Ä—Ç —Ö–µ–ª–ø–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ admin_list_detail_handlers_aiogram
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
# –§—É–Ω–∫—Ü–∏—è show_admin_main_menu_aiogram –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤, –≥–¥–µ –æ–Ω–∞ –Ω—É–∂–Ω–∞,
# —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
from ..admin_list_detail_handlers_aiogram import _send_or_edit_message


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


# –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
PRODUCT_SELECT_PAGE_SIZE_UPDATE = 10


# --- FSM States ---
class ProductUpdateFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_category_selection = State()
    waiting_for_manufacturer_selection = State()
    confirm_update = State()

# --- Handlers ---
async def start_product_update(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    await callback_query.answer()

    # –ü–∞—Ä—Å–∏–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    try:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç callback_data: {–ø—Ä–µ—Ñ–∏–∫—Å_–∏–Ω–∏—Ü–∏–∞—Ü–∏–∏_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è}{id}
        product_id_str = callback_query.data.replace(PRODUCT_UPDATE_INIT_CALLBACK_PREFIX, "")
        product_id = int(product_id_str)
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–ª–±—ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {callback_query.data}")
        await _send_or_edit_message(callback_query, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤)
        from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
        await show_admin_main_menu_aiogram(callback_query, state)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î
    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏,
    # –ª—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏.
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è get_product_by_id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Product –æ–±—ä–µ–∫—Ç, —Å–≤—è–∑–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ (lazy loading).
    product = db.get_product_by_id(product_id)
    if not product:
        logger.error(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        await _send_or_edit_message(callback_query, "‚ùå –û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
        await show_admin_main_menu_aiogram(callback_query, state)
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    await state.clear()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    await state.update_data(
        updating_product_id=product.id,
        original_name=product.name,
        original_description=product.description,
        original_price=product.price, # SQLAlchemy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Decimal –¥–ª—è –ø–æ–ª—è DECIMAL
        original_category_id=product.category_id,
        original_category_name=product.category.name if product.category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        original_manufacturer_id=product.manufacturer_id,
        original_manufacturer_name=product.manufacturer.name if product.manufacturer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É: –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    await state.set_state(ProductUpdateFSM.waiting_for_name)
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∫–æ–ª–±—ç–∫ (–¥–µ—Ç–∞–ª–∏)
    original_name_esc = types.utils.markdown.text_decorations.escape_markdown(product.name)

    await _send_or_edit_message(
        callback_query,
        f"üìù **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¢–æ–≤–∞—Ä–∞** (ID: `{product.id}`)\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: `{original_name_esc}`\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ `{SKIP_INPUT_MARKER}`."
        f"\n*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel*", # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–æ –æ—Ç–º–µ–Ω—É
        parse_mode="MarkdownV2"
    )

async def process_product_name_update(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (UPDATE FSM)."""
    user_data = await state.get_data()
    original_name = user_data.get("original_name")
    new_name = message.text.strip()

    if new_name == SKIP_INPUT_MARKER:
        new_name = original_name # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        original_name_esc = types.utils.markdown.text_decorations.escape_markdown(original_name)
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: `{original_name_esc}`.", parse_mode="MarkdownV2")
    elif not new_name:
         await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏–ª–∏ /cancel.")
         # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
         return
    else:
        new_name_esc = types.utils.markdown.text_decorations.escape_markdown(new_name)
        await message.answer(f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: `{new_name_esc}`", parse_mode="MarkdownV2")

    await state.update_data(new_name=new_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    await state.set_state(ProductUpdateFSM.waiting_for_description)
    original_description = user_data.get('original_description') or '–ù–µ—Ç'
    original_description_esc = types.utils.markdown.text_decorations.escape_markdown(original_description)

    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: `{original_description_esc}`\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ `{SKIP_INPUT_MARKER}`."
        f"\n*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel*",
        parse_mode="MarkdownV2"
    )


async def process_product_description_update(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (UPDATE FSM)."""
    user_data = await state.get_data()
    original_description = user_data.get("original_description")
    new_description = message.text.strip()

    if new_description == SKIP_INPUT_MARKER:
        new_description = original_description # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
        original_description_esc = types.utils.markdown.text_decorations.escape_markdown(original_description or '–ù–µ—Ç')
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: `{original_description_esc}`.", parse_mode="MarkdownV2")
    elif not new_description: # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —Å–±—Ä–æ—Å–æ–º –æ–ø–∏—Å–∞–Ω–∏—è
        new_description = None
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –ù–µ—Ç).")
    else:
        new_description_esc = types.utils.markdown.text_decorations.escape_markdown(new_description)
        await message.answer(f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: `{new_description_esc}`", parse_mode="MarkdownV2")

    await state.update_data(new_description=new_description)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–Ω–µ
    await state.set_state(ProductUpdateFSM.waiting_for_price)
    original_price = user_data.get('original_price', Decimal(0))
    original_price_esc = types.utils.markdown.text_decorations.escape_markdown(f'{original_price:.2f}')

    await message.answer(
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{original_price_esc}` —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `123` –∏–ª–∏ `123.45`) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ `{SKIP_INPUT_MARKER}`."
        f"\n*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel*",
        parse_mode="MarkdownV2"
    )


async def process_product_price_update(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (UPDATE FSM)."""
    user_data = await state.get_data()
    original_price = user_data.get("original_price") # –≠—Ç–æ Decimal –∏–∑ state
    price_str = message.text.strip()

    if price_str == SKIP_INPUT_MARKER:
        new_price = original_price # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
        await state.update_data(new_price=new_price)
        original_price_esc = types.utils.markdown.text_decorations.escape_markdown(f'{original_price:.2f}')
        await message.answer(f"–¶–µ–Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: `{original_price_esc}` —Ä—É–±.", parse_mode="MarkdownV2")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.set_state(ProductUpdateFSM.waiting_for_category_selection)
        await show_product_category_update_selection(message, state)
    else:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ Decimal
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª 123,45
            new_price = Decimal(price_str.replace(',', '.'))
            if new_price < 0:
                await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏–ª–∏ /cancel.")
                # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                return
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è DECIMAL(10, 2)
            new_price = new_price.quantize(Decimal('0.01'))
            await state.update_data(new_price=new_price)
            new_price_esc = types.utils.markdown.text_decorations.escape_markdown(f'{new_price:.2f}')
            await message.answer(f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: `{new_price_esc}` —Ä—É–±.", parse_mode="MarkdownV2")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await state.set_state(ProductUpdateFSM.waiting_for_category_selection)
            await show_product_category_update_selection(message, state)

        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `123` –∏–ª–∏ `123.45`), –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏–ª–∏ /cancel.")
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            return


async def show_product_category_update_selection(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (UPDATE FSM)."""
    user_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
    all_categories = db.get_all_categories()
    categories = all_categories # –ü–æ–∫–∞ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ state, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
    current_page = user_data.get("category_page_update", 0)

    original_category_name = user_data.get("original_category_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    original_category_name_esc = types.utils.markdown.text_decorations.escape_markdown(original_category_name)

    if not categories:
        # –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –Ω–æ–≤—É—é, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞).
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–π –Ω–µ –±—ã–ª–æ (—á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å category_id NOT NULL),
        # —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è. –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ.
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ original_category_id –Ω–µ None.
        await state.update_data(
            new_category_id=user_data.get("original_category_id"),
            new_category_name=user_data.get("original_category_name")
        )
        text = f"‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: `{original_category_name_esc}`."
        await _send_or_edit_message(target, text, parse_mode="MarkdownV2")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        await state.set_state(ProductUpdateFSM.waiting_for_manufacturer_selection)
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        all_manufacturers = db.get_all_manufacturers()
        await state.update_data(available_manufacturers_update=all_manufacturers, manufacturer_page_update=0)
        await show_product_manufacturer_update_selection(target, state)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await state.update_data(available_categories_update=categories, category_page_update=current_page)


    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é" –∏ "–û—Ç–º–µ–Ω–∞"
    extra_buttons = [
        [types.InlineKeyboardButton(text=f"üì¶ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é (`{original_category_name_esc}`)", callback_data=KEEP_CURRENT_CATEGORY_CALLBACK)],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CANCEL_FSM_CALLBACK)],
    ]

    def format_category_button_text(category: db.Category) -> str:
         return f"üìÇ {types.utils.markdown.text_decorations.escape_markdown(category.name)}"

    reply_markup = generate_pagination_keyboard(
        items=categories,
        current_page=current_page,
        page_size=PRODUCT_SELECT_PAGE_SIZE_UPDATE,
        select_callback_prefix=UPDATE_PROD_CAT_SEL_PREFIX,
        # –§–æ—Ä–º–∞—Ç pagination_callback_prefix –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å ":" –≤ –∫–æ–Ω—Ü–µ, –∫–∞–∫ –≤ fsm_utils
        pagination_callback_prefix=f"{PAGINATION_CALLBACK_PREFIX}{UPDATE_PROD_CAT_PAGE_PREFIX.strip(':')}:",
        item_text_func=format_category_button_text,
        item_id_func=lambda c: c.id,
        extra_buttons=extra_buttons,
        cancel_callback=CANCEL_FSM_CALLBACK # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–±—ç–∫ –æ—Ç–º–µ–Ω—ã
    )

    text = f"–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: `{original_category_name_esc}`\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}):"

    await _send_or_edit_message(target, text, reply_markup=reply_markup, parse_mode="MarkdownV2")


async def process_product_category_update_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é" (UPDATE FSM)."""
    await callback_query.answer()
    data = callback_query.data
    user_data = await state.get_data()

    if data == KEEP_CURRENT_CATEGORY_CALLBACK:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await state.update_data(
            new_category_id=user_data.get("original_category_id"),
            new_category_name=user_data.get("original_category_name")
        )
        original_category_name = user_data.get('original_category_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        original_category_name_esc = types.utils.markdown.text_decorations.escape_markdown(original_category_name)
        await callback_query.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: `{original_category_name_esc}`.", parse_mode="MarkdownV2")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        await state.set_state(ProductUpdateFSM.waiting_for_manufacturer_selection)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
        all_manufacturers = db.get_all_manufacturers()
        await state.update_data(available_manufacturers_update=all_manufacturers, manufacturer_page_update=0)
        await show_product_manufacturer_update_selection(callback_query, state)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é", –ø–∞—Ä—Å–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: {prefix}{id} -> "upd_prod_cat_sel:123"
        prefix, category_id_str = data.split(":")
        category_id = int(category_id_str)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if f"{prefix}:" != UPDATE_PROD_CAT_SEL_PREFIX:
            raise ValueError("Invalid callback prefix")
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ update FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        await show_product_category_update_selection(callback_query, state)
        return


    selected_category = db.get_category_by_id(category_id)
    if not selected_category:
        await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await show_product_category_update_selection(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    await state.update_data(new_category_id=category_id, new_category_name=selected_category.name)
    selected_category_name_esc = types.utils.markdown.text_decorations.escape_markdown(selected_category.name)
    await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: `{selected_category_name_esc}`.", parse_mode="MarkdownV2")


    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
    await state.set_state(ProductUpdateFSM.waiting_for_manufacturer_selection)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
    all_manufacturers = db.get_all_manufacturers()
    await state.update_data(available_manufacturers_update=all_manufacturers, manufacturer_page_update=0)
    await show_product_manufacturer_update_selection(callback_query, state)


async def process_product_category_update_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (UPDATE FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "page:{entity_prefix}:{page_number}" -> "page:upd_prod_cat:{page_number}"
    parts = data.split(":")
    # parts[0] == 'page', parts[1] == entity_prefix, parts[2] == page_number
    if len(parts) != 3 or parts[0] != PAGINATION_CALLBACK_PREFIX.strip(':') or parts[1] != UPDATE_PROD_CAT_PAGE_PREFIX.strip(':'):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ update FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        await show_product_category_update_selection(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    try:
        new_page = int(parts[2])
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ update FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã).")
        await show_product_category_update_selection(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    user_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ (–∏–ª–∏ –∏–∑ state, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å)
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±–æ–ª—å—à–æ–π –∏ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è, –ª—É—á—à–µ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ë–î. –ï—Å–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π - –∏–∑ state.
    # –î–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å generate_pagination_keyboard, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑ items,
    # –ª—É—á—à–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤ state –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º show_product_category_update_selection.
    all_categories = db.get_all_categories()
    categories = all_categories # –ü–æ–∫–∞ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    await state.update_data(available_categories_update=categories, category_page_update=new_page) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É

    total_pages = math.ceil(len(categories) / PRODUCT_SELECT_PAGE_SIZE_UPDATE)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if new_page < 0 or new_page >= total_pages:
         logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page} (–≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü {total_pages}) –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ update FSM.")
         # –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (0 –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é)
         new_page = max(0, min(new_page, total_pages - 1 if total_pages > 0 else 0))
         await state.update_data(category_page_update=new_page)
         await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.") # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫
         # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫, –Ω–æ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         # –ù–ï return, —á—Ç–æ–±—ã show_product_category_update_selection –±—ã–ª –≤—ã–∑–≤–∞–Ω
         # Pass callback_query as target
         await show_product_category_update_selection(callback_query, state)
    else:
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await show_product_category_update_selection(callback_query, state)


async def show_product_manufacturer_update_selection(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–≤–∞—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (UPDATE FSM)."""
    user_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –ë–î –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
    all_manufacturers = db.get_all_manufacturers()
    manufacturers = all_manufacturers # –ü–æ–∫–∞ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ state, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
    current_page = user_data.get("manufacturer_page_update", 0)

    original_manufacturer_name = user_data.get("original_manufacturer_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    original_manufacturer_name_esc = types.utils.markdown.text_decorations.escape_markdown(original_manufacturer_name)


    if not manufacturers:
        # –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª.
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ original_manufacturer_id –Ω–µ None.
        await state.update_data(
            new_manufacturer_id=user_data.get("original_manufacturer_id"),
            new_manufacturer_name=user_data.get("original_manufacturer_name")
        )
        text = f"‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞.\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Ç–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: `{original_manufacturer_name_esc}`."
        await _send_or_edit_message(target, text, parse_mode="MarkdownV2")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_product_update_confirm(target, state)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await state.update_data(available_manufacturers_update=manufacturers, manufacturer_page_update=current_page)


    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ" –∏ "–û—Ç–º–µ–Ω–∞"
    extra_buttons = [
        [types.InlineKeyboardButton(text=f"üè≠ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ (`{original_manufacturer_name_esc}`)", callback_data=KEEP_CURRENT_MANUFACTURER_CALLBACK)],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CANCEL_FSM_CALLBACK)],
    ]

    def format_manufacturer_button_text(manufacturer: db.Manufacturer) -> str:
        return f"üè≠ {types.utils.markdown.text_decorations.escape_markdown(manufacturer.name)}"


    reply_markup = generate_pagination_keyboard(
        items=manufacturers,
        current_page=current_page,
        page_size=PRODUCT_SELECT_PAGE_SIZE_UPDATE,
        select_callback_prefix=UPDATE_PROD_MAN_SEL_PREFIX,
        # –§–æ—Ä–º–∞—Ç pagination_callback_prefix –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å ":" –≤ –∫–æ–Ω—Ü–µ
        pagination_callback_prefix=f"{PAGINATION_CALLBACK_PREFIX}{UPDATE_PROD_MAN_PAGE_PREFIX.strip(':')}:",
        item_text_func=format_manufacturer_button_text,
        item_id_func=lambda m: m.id,
        extra_buttons=extra_buttons,
        cancel_callback=CANCEL_FSM_CALLBACK # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–±—ç–∫ –æ—Ç–º–µ–Ω—ã
    )

    text = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: `{original_manufacturer_name_esc}`\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}):"

    await _send_or_edit_message(target, text, reply_markup=reply_markup, parse_mode="MarkdownV2")


async def process_product_manufacturer_update_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ" (UPDATE FSM)."""
    await callback_query.answer()
    data = callback_query.data
    user_data = await state.get_data()

    if data == KEEP_CURRENT_MANUFACTURER_CALLBACK:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        await state.update_data(
            new_manufacturer_id=user_data.get("original_manufacturer_id"),
            new_manufacturer_name=user_data.get("original_manufacturer_name")
        )
        original_manufacturer_name = user_data.get('original_manufacturer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        original_manufacturer_name_esc = types.utils.markdown.text_decorations.escape_markdown(original_manufacturer_name)
        await callback_query.message.edit_text(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: `{original_manufacturer_name_esc}`.", parse_mode="MarkdownV2")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_product_update_confirm(callback_query, state)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ", –ø–∞—Ä—Å–∏–º ID –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
    try:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: {prefix}{id} -> "upd_prod_man_sel:123"
        prefix, manufacturer_id_str = data.split(":")
        manufacturer_id = int(manufacturer_id_str)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        if f"{prefix}:" != UPDATE_PROD_MAN_SEL_PREFIX:
             raise ValueError("Invalid callback prefix")
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ update FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.")
        await show_product_manufacturer_update_selection(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return


    selected_manufacturer = db.get_manufacturer_by_id(manufacturer_id)
    if not selected_manufacturer:
        await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await show_product_manufacturer_update_selection(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    await state.update_data(new_manufacturer_id=manufacturer_id, new_manufacturer_name=selected_manufacturer.name)
    selected_manufacturer_name_esc = types.utils.markdown.text_decorations.escape_markdown(selected_manufacturer.name)
    await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: `{selected_manufacturer_name_esc}`.", parse_mode="MarkdownV2")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await show_product_update_confirm(callback_query, state)


async def process_product_manufacturer_update_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (UPDATE FSM)."""
    await callback_query.answer()
    data = callback_query.data
     # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "page:{entity_prefix}:{page_number}" -> "page:upd_prod_man:{page_number}"
    parts = data.split(":")
    # parts[0] == 'page', parts[1] == entity_prefix, parts[2] == page_number
    if len(parts) != 3 or parts[0] != PAGINATION_CALLBACK_PREFIX.strip(':') or parts[1] != UPDATE_PROD_MAN_PAGE_PREFIX.strip(':'):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ update FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        await show_product_manufacturer_update_selection(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    try:
        new_page = int(parts[2])
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ update FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã).")
        await show_product_manufacturer_update_selection(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return


    user_data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –ë–î –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
    all_manufacturers = db.get_all_manufacturers()
    manufacturers = all_manufacturers # –ü–æ–∫–∞ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    await state.update_data(available_manufacturers_update=manufacturers, manufacturer_page_update=new_page) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É

    total_pages = math.ceil(len(manufacturers) / PRODUCT_SELECT_PAGE_SIZE_UPDATE)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if new_page < 0 or new_page >= total_pages:
         logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page} (–≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü {total_pages}) –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ update FSM.")
         # –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (0 –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é)
         new_page = max(0, min(new_page, total_pages - 1 if total_pages > 0 else 0))
         await state.update_data(manufacturer_page_update=new_page)
         await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.") # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫
         # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫, –Ω–æ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         # –ù–ï return, —á—Ç–æ–±—ã show_product_manufacturer_update_selection –±—ã–ª –≤—ã–∑–≤–∞–Ω
         # Pass callback_query as target
         await show_product_manufacturer_update_selection(callback_query, state)
    else:
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await show_product_manufacturer_update_selection(callback_query, state)


async def show_product_update_confirm(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (UPDATE FSM)."""
    user_data = await state.get_data()
    product_id = user_data.get("updating_product_id")

    original_name = user_data.get("original_name")
    original_description = user_data.get("original_description")
    original_price = user_data.get("original_price") # Decimal
    original_category_name = user_data.get("original_category_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    original_manufacturer_name = user_data.get("original_manufacturer_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    new_name = user_data.get("new_name") # –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ FSM state
    new_description = user_data.get("new_description") # –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ FSM state
    new_price = user_data.get("new_price") # –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ FSM state (Decimal)
    new_category_name = user_data.get("new_category_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") # –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ FSM state
    new_manufacturer_name = user_data.get("new_manufacturer_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") # –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ FSM state


    text = f"‚ú® **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¢–æ–≤–∞—Ä–∞** (ID: `{product_id}`) ‚ú®\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—é, —ç–∫—Ä–∞–Ω–∏—Ä—É—è –¥–ª—è MarkdownV2
    original_name_esc = types.utils.markdown.text_decorations.escape_markdown(original_name)
    new_name_esc = types.utils.markdown.text_decorations.escape_markdown(new_name)
    if new_name != original_name:
        text += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** ~~`{original_name_esc}`~~ ‚Üí `{new_name_esc}`\n"
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ç.–∫. –æ–Ω–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ state –∫–∞–∫ "–Ω–æ–≤–æ–µ"
        text += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{new_name_esc}` (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)\n"


    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è None
    original_description_esc = types.utils.markdown.text_decorations.escape_markdown(original_description or '–ù–µ—Ç')
    new_description_esc = types.utils.markdown.text_decorations.escape_markdown(new_description or '–ù–µ—Ç')
    if (original_description is None or original_description == "") and (new_description is None or new_description == ""):
        text += "**–û–ø–∏—Å–∞–Ω–∏–µ:** –ù–µ—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)\n"
    elif original_description != new_description:
         # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å None –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
         old_desc_display = f"`{original_description_esc}`" if original_description else "~~(–ù–µ—Ç)~~"
         # –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–≥–ª–æ —Å—Ç–∞—Ç—å None –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
         new_desc_display = f"`{new_description_esc}`" if new_description else "–ù–µ—Ç"
         text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {old_desc_display} ‚Üí {new_desc_display}\n"
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ/—Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** `{new_description_esc}` (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)\n"


    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ü–µ–Ω—ã, —É—á–∏—Ç—ã–≤–∞—è —Ñ–æ—Ä–º–∞—Ç Decimal
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ original_price –∏ new_price —è–≤–ª—è—é—Ç—Å—è Decimal –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É None –¥–ª—è original_price (—Ö–æ—Ç—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None)
    original_price_formatted = f'{original_price:.2f}' if original_price is not None else '–ù–µ—Ç'
    new_price_formatted = f'{new_price:.2f}' if new_price is not None else '–ù–µ—Ç'

    original_price_esc = types.utils.markdown.text_decorations.escape_markdown(original_price_formatted)
    new_price_esc = types.utils.markdown.text_decorations.escape_markdown(new_price_formatted)

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ–µ None
    # –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π None, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ—Å—Ç—å (—ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è —Ü–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞)
    if original_price is None or new_price is None or original_price != new_price: # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Decimal —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
         text += f"**–¶–µ–Ω–∞:** ~~`{original_price_esc}`~~ ‚Üí `{new_price_esc}` —Ä—É–±.\n"
    else:
         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ/—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
         text += f"**–¶–µ–Ω–∞:** `{new_price_esc}` —Ä—É–±. (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)\n"

    original_category_name_esc = types.utils.markdown.text_decorations.escape_markdown(original_category_name)
    new_category_name_esc = types.utils.markdown.text_decorations.escape_markdown(new_category_name)
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –±—ã–ª–∞ –ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if user_data.get("new_category_id") != user_data.get("original_category_id"):
        text += f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ~~`{original_category_name_esc}`~~ ‚Üí `{new_category_name_esc}`\n"
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ/—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        text += f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{new_category_name_esc}` (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)\n"

    original_manufacturer_name_esc = types.utils.markdown.text_decorations.escape_markdown(original_manufacturer_name)
    new_manufacturer_name_esc = types.utils.markdown.text_decorations.escape_markdown(new_manufacturer_name)
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å
    if user_data.get("new_manufacturer_id") != user_data.get("original_manufacturer_id"):
        text += f"**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:** ~~`{original_manufacturer_name_esc}`~~ ‚Üí `{new_manufacturer_name_esc}`\n"
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ/—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        text += f"**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:** `{new_manufacturer_name_esc}` (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)\n"

    text += "\n–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ."
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–æ –æ—Ç–º–µ–Ω—É –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞" —É–∂–µ –µ—Å—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ

    keyboard = [
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data=CONFIRM_ACTION_CALLBACK)],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CANCEL_FSM_CALLBACK)],
    ]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    await _send_or_edit_message(target, text, reply_markup=reply_markup, parse_mode="MarkdownV2")

    await state.set_state(ProductUpdateFSM.confirm_update)


async def process_product_update_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (UPDATE FSM)."""
    await callback_query.answer()
    user_data = await state.get_data()
    product_id = user_data.get("updating_product_id")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∏–ª–∏ —Å—Ç–∞—Ä—ã–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã) –∏–∑ FSM state
    new_name = user_data.get("new_name")
    new_description = user_data.get("new_description")
    new_price = user_data.get("new_price") # Decimal
    new_category_id = user_data.get("new_category_id")
    new_manufacturer_id = user_data.get("new_manufacturer_id")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {
        "name": new_name,
        "description": new_description,
        "price": new_price, # Pass Decimal directly
        "category_id": new_category_id,
        "manufacturer_id": new_manufacturer_id
    }

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ utils/db.py
    updated_product = db.update_product(product_id, update_data)

    if updated_product:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Å–≤—è–∑–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞.
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ db.update_product –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
        # –∏–ª–∏ lazy loading —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
        updated_category_name = updated_product.category.name if updated_product.category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        updated_manufacturer_name = updated_product.manufacturer.name if updated_product.manufacturer else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–ª—è MarkdownV2
        updated_name_esc = types.utils.markdown.text_decorations.escape_markdown(updated_product.name)
        updated_price_esc = types.utils.markdown.text_decorations.escape_markdown(f'{updated_product.price:.2f}')
        updated_category_name_esc = types.utils.markdown.text_decorations.escape_markdown(updated_category_name)
        updated_manufacturer_name_esc = types.utils.markdown.text_decorations.escape_markdown(updated_manufacturer_name)

        await callback_query.message.edit_text(
            f"üéâ **–¢–æ–≤–∞—Ä (ID: `{product_id}`) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!** üéâ\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: `{updated_name_esc}`\n"
            f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: `{updated_price_esc}` —Ä—É–±.\n"
            f"–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: `{updated_category_name_esc}`\n"
            f"–ù–æ–≤—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: `{updated_manufacturer_name_esc}`",
            parse_mode="MarkdownV2"
        )
    else:
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –∏–∑ db.update_product, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ (IntegrityError)
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è, –∏–ª–∏ –∏–º—è —Ç–æ–≤–∞—Ä–∞ —É–∂–µ –∑–∞–Ω—è—Ç–æ (–µ—Å–ª–∏ –±—ã –∏–º—è –±—ã–ª–æ unique)
        # –í —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ Product.name –Ω–µ unique, IntegrityError –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ category_id –∏–ª–∏ manufacturer_id
        await callback_query.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ (ID: `{product_id}`).**\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–≤—è–∑–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è).",
             parse_mode="MarkdownV2"
        )

    await state.clear() # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)
    from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
    await show_admin_main_menu_aiogram(callback_query, state)


# --- Router Registration ---
# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è FSM –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
product_update_fsm_router = Router(name="product_update_fsm_router")

def register_product_update_handlers(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è FSM –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""

    # ENTRY POINT: –ó–∞–ø—É—Å–∫ FSM –ø–æ –∫–æ–ª–±—ç–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º F.data.startswith –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    router.callback_query.register(
        start_product_update,
        F.data.startswith(PRODUCT_UPDATE_INIT_CALLBACK_PREFIX)
        # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π, —Ç.–∫. —ç—Ç–æ –≤—Ö–æ–¥ –≤ FSM
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤ FSM (–æ–∂–∏–¥–∞—é—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä F.text, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–ø.)
    router.message.register(process_product_name_update, ProductUpdateFSM.waiting_for_name, F.text)
    router.message.register(process_product_description_update, ProductUpdateFSM.waiting_for_description, F.text)
    router.message.register(process_product_price_update, ProductUpdateFSM.waiting_for_price, F.text)

    # –•—ç–Ω–¥–ª–µ—Ä—ã –≤—ã–±–æ—Ä–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–∂–∏–¥–∞—é—Ç –∫–æ–ª–±—ç–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)
    router.callback_query.register(
        process_product_category_update_selection,
        ProductUpdateFSM.waiting_for_category_selection,
        # –õ–æ–≤–∏—Ç –ª–∏–±–æ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID (startswith), –ª–∏–±–æ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é" (Text)
        F.data.startswith(UPDATE_PROD_CAT_SEL_PREFIX) | (F.data == KEEP_CURRENT_CATEGORY_CALLBACK)
    )
    router.callback_query.register(
        process_product_category_update_pagination,
        ProductUpdateFSM.waiting_for_category_selection,
        # –õ–æ–≤–∏—Ç –∫–æ–ª–±—ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        F.data.startswith(f"{PAGINATION_CALLBACK_PREFIX}{UPDATE_PROD_CAT_PAGE_PREFIX.strip(':')}:")
    )

    # –•—ç–Ω–¥–ª–µ—Ä—ã –≤—ã–±–æ—Ä–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (–æ–∂–∏–¥–∞—é—Ç –∫–æ–ª–±—ç–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)
    router.callback_query.register(
        process_product_manufacturer_update_selection,
        ProductUpdateFSM.waiting_for_manufacturer_selection,
         # –õ–æ–≤–∏—Ç –ª–∏–±–æ –≤—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ ID, –ª–∏–±–æ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ"
        F.data.startswith(UPDATE_PROD_MAN_SEL_PREFIX) | (F.data == KEEP_CURRENT_MANUFACTURER_CALLBACK)
    )
    router.callback_query.register(
        process_product_manufacturer_update_pagination,
        ProductUpdateFSM.waiting_for_manufacturer_selection,
        # –õ–æ–≤–∏—Ç –∫–æ–ª–±—ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        F.data.startswith(f"{PAGINATION_CALLBACK_PREFIX}{UPDATE_PROD_MAN_PAGE_PREFIX.strip(':')}:")
    )

    # –•—ç–Ω–¥–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ—Ç –∫–æ–ª–±—ç–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –∫–æ–ª–±—ç–∫–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    router.callback_query.register(
        process_product_update_confirm,
        ProductUpdateFSM.confirm_update,
        F.data == CONFIRM_ACTION_CALLBACK
    )

    # –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ –∏–ª–∏ –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞.
    # –ï–≥–æ —Å–ª–µ–¥—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π State("*") —Å —Ñ–∏–ª—å—Ç—Ä–æ–º Text(CANCEL_FSM_CALLBACK)
    # –∏–ª–∏ F.text == "/cancel". –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ bot.py –∏–ª–∏ admin_router.


# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
register_product_update_handlers(product_update_fsm_router)

# –†–æ—É—Ç–µ—Ä product_update_fsm_router —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –≥–æ—Ç–æ–≤ –∫ –≤–∫–ª—é—á–µ–Ω–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–ø–∞—Ç—á–µ—Ä/—Ä–æ—É—Ç–µ—Ä.

# your_bot/handlers/fsm/product_add_fsm.py
# FSM –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

import logging
import math
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from typing import Union
from decimal import Decimal # –ò–º–ø–æ—Ä—Ç Decimal –¥–ª—è —Ü–µ–Ω—ã

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
from utils import db

# –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö FSM —É—Ç–∏–ª–∏—Ç –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from .fsm_utils import CANCEL_FSM_CALLBACK, CONFIRM_ACTION_CALLBACK, generate_pagination_keyboard, PAGINATION_CALLBACK_PREFIX, SKIP_INPUT_MARKER

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä–∞ –≤ ADD FSM
PRODUCT_CATEGORY_PAGE_CALLBACK_PREFIX_ADD = "add_prod_cat_page:"
SELECT_PRODUCT_CATEGORY_CALLBACK_PREFIX_ADD = "add_prod_cat_sel:"
PRODUCT_MANUFACTURER_PAGE_CALLBACK_PREFIX_ADD = "add_prod_man_page:"
SELECT_PRODUCT_MANUFACTURER_CALLBACK_PREFIX_ADD = "add_prod_man_sel:"

# –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
PRODUCT_PAGE_SIZE_ADD = 10

# --- FSM States ---
class ProductAddFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_category_selection = State()
    waiting_for_manufacturer_selection = State()
    confirm_add = State()

# --- Handlers ---
async def start_product_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    await callback_query.answer()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    await state.clear()
    await state.set_state(ProductAddFSM.waiting_for_name)
    await callback_query.message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∫–æ–ª–±—ç–∫
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–æ–≤–∞—Ä–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
    )

async def process_product_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."""
    product_name = message.text.strip()
    if not product_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
        return

    await state.update_data(name=product_name)
    await state.set_state(ProductAddFSM.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ `-`).")

async def process_product_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."""
    description = message.text.strip()
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –ø—Ä–æ–ø—É—Å–∫–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª '-')
    if description == SKIP_INPUT_MARKER:
        description = None
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –ù–µ—Ç).")
    elif not description: # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–æ–º
         description = None
         await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –ù–µ—Ç).")
    # else: description —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

    await state.update_data(description=description)
    await state.set_state(ProductAddFSM.waiting_for_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `123.45`).")


async def process_product_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞."""
    price_str = message.text.strip()
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
        price = float(price_str)
        if price < 0:
            await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
            return
        # SQLAlchemy DECIMAL(10, 2) –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        price = Decimal(round(price, 2)) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        await state.update_data(price=price)
        await message.answer(f"–¶–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞: `{price:.2f}` —Ä—É–±.", parse_mode="MarkdownV2")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `123` –∏–ª–∏ `123.45`) –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_categories = db.get_all_categories()
    if not all_categories:
        await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM, —Ç.–∫. —Ç–æ–≤–∞—Ä –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await message.answer(
            "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏'."
        )
        from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
        await show_admin_main_menu_aiogram(message, state)
        return

    await state.update_data(available_categories_add=all_categories, category_page_add=0)
    await state.set_state(ProductAddFSM.waiting_for_category_selection)
    await show_product_category_selection_add(message, state) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


async def show_product_category_selection_add(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (ADD FSM)."""
    user_data = await state.get_data()
    categories = user_data.get("available_categories_add", [])
    current_page = user_data.get("category_page_add", 0)

    if not categories: # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–∞–Ω–µ–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
         await state.clear()
         text = "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
         if isinstance(target, types.CallbackQuery):
             await target.message.edit_text(text)
             from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
             await show_admin_main_menu_aiogram(target, state)
         else:
              await target.answer(text)
         return

    def format_category_button_text(category: db.Category) -> str:
        return f"üìÇ {category.name}"

    reply_markup = generate_pagination_keyboard(
        items=categories,
        current_page=current_page,
        page_size=PRODUCT_PAGE_SIZE_ADD,
        select_callback_prefix=SELECT_PRODUCT_CATEGORY_CALLBACK_PREFIX_ADD,
        pagination_callback_prefix=f"{PAGINATION_CALLBACK_PREFIX}{PRODUCT_CATEGORY_PAGE_CALLBACK_PREFIX_ADD.strip(':')}:",
        item_text_func=format_category_button_text,
        item_id_func=lambda c: c.id
    )

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}):"

    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=reply_markup)
    else:
        await target.answer(text, reply_markup=reply_markup)


async def process_product_category_selection_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: {prefix}{id} -> "add_prod_cat_sel:123"
    try:
        action, category_id_str = data.split(":")
        category_id = int(category_id_str)
    except ValueError:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ add FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await show_product_category_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return


    selected_category = db.get_category_by_id(category_id)
    if not selected_category:
        await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await show_product_category_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    await state.update_data(category_id=category_id, category_name=selected_category.name)
    await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: `{types.utils.markdown.text_decorations.escape_markdown(selected_category.name)}`.", parse_mode="MarkdownV2")


    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
    await state.set_state(ProductAddFSM.waiting_for_manufacturer_selection)
    all_manufacturers = db.get_all_manufacturers()
    if not all_manufacturers:
         await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM, —Ç.–∫. —Ç–æ–≤–∞—Ä –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
         await callback_query.message.answer(
            "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º–∏'."
         )
         from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
         await show_admin_main_menu_aiogram(callback_query, state)
         return

    await state.update_data(available_manufacturers_add=all_manufacturers, manufacturer_page_add=0)
    await show_product_manufacturer_selection_add(callback_query, state) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


async def process_product_category_pagination_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "page:{entity_prefix}:{page_number}" -> "page:add_prod_cat:{page_number}"
    parts = data.split(":")
    if len(parts) != 3 or parts[0] != PAGINATION_CALLBACK_PREFIX.strip(':') or parts[1] != PRODUCT_CATEGORY_PAGE_CALLBACK_PREFIX_ADD.strip(':'):
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ add FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        await show_product_category_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞
        return

    new_page = int(parts[2])

    user_data = await state.get_data()
    categories = user_data.get("available_categories_add", [])
    total_pages = math.ceil(len(categories) / PRODUCT_PAGE_SIZE_ADD)

    if 0 <= new_page < total_pages:
        await state.update_data(category_page_add=new_page)
        await show_product_category_selection_add(callback_query, state)
    else:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")


async def show_product_manufacturer_selection_add(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (ADD FSM)."""
    user_data = await state.get_data()
    manufacturers = user_data.get("available_manufacturers_add", [])
    current_page = user_data.get("manufacturer_page_add", 0)

    if not manufacturers: # –î–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, —Ç.–∫. –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
        text = "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è."
        await state.clear()
        if isinstance(target, types.CallbackQuery): await target.message.edit_text(text)
        else: await target.answer(text)
        from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
        await show_admin_main_menu_aiogram(target, state)
        return

    def format_manufacturer_button_text(manufacturer: db.Manufacturer) -> str:
        return f"üè≠ {manufacturer.name}"

    reply_markup = generate_pagination_keyboard(
        items=manufacturers,
        current_page=current_page,
        page_size=PRODUCT_PAGE_SIZE_ADD,
        select_callback_prefix=SELECT_PRODUCT_MANUFACTURER_CALLBACK_PREFIX_ADD,
        pagination_callback_prefix=f"{PAGINATION_CALLBACK_PREFIX}{PRODUCT_MANUFACTURER_PAGE_CALLBACK_PREFIX_ADD.strip(':')}:",
        item_text_func=format_manufacturer_button_text,
        item_id_func=lambda m: m.id
    )

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}):"

    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=reply_markup)
    else:
        await target.answer(text, reply_markup=reply_markup)


async def process_product_manufacturer_selection_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: {prefix}{id} -> "add_prod_man_sel:123"
    try:
        action, manufacturer_id_str = data.split(":")
        manufacturer_id = int(manufacturer_id_str)
    except ValueError:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ add FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.")
        await show_product_manufacturer_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    selected_manufacturer = db.get_manufacturer_by_id(manufacturer_id)
    if not selected_manufacturer:
        await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await show_product_manufacturer_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    await state.update_data(manufacturer_id=manufacturer_id, manufacturer_name=selected_manufacturer.name)
    await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: `{types.utils.markdown.text_decorations.escape_markdown(selected_manufacturer.name)}`.", parse_mode="MarkdownV2")


    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await show_product_confirm_add(callback_query, state)


async def process_product_manufacturer_pagination_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "page:{entity_prefix}:{page_number}" -> "page:add_prod_man:{page_number}"
    parts = data.split(":")
    if len(parts) != 3 or parts[0] != PAGINATION_CALLBACK_PREFIX.strip(':') or parts[1] != PRODUCT_MANUFACTURER_PAGE_CALLBACK_PREFIX_ADD.strip(':'):
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ add FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        await show_product_manufacturer_selection_add(callback_query, state)
        return


    new_page = int(parts[2])

    user_data = await state.get_data()
    manufacturers = user_data.get("available_manufacturers_add", [])
    total_pages = math.ceil(len(manufacturers) / PRODUCT_PAGE_SIZE_ADD)

    if 0 <= new_page < total_pages:
        await state.update_data(manufacturer_page_add=new_page)
        await show_product_manufacturer_selection_add(callback_query, state)
    else:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")


async def show_product_confirm_add(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (ADD FSM)."""
    user_data = await state.get_data()
    name = user_data.get("name")
    description = user_data.get("description")
    price = user_data.get("price") # –≠—Ç–æ —É–∂–µ Decimal
    category_name = user_data.get("category_name")
    manufacturer_name = user_data.get("manufacturer_name")

    text = (
        "‚ú® **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¢–æ–≤–∞—Ä–∞** ‚ú®\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{types.utils.markdown.text_decorations.escape_markdown(name)}`\n"
    )
    if description:
        text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** `{types.utils.markdown.text_decorations.escape_markdown(description)}`\n"
    text += (
        f"**–¶–µ–Ω–∞:** `{types.utils.markdown.text_decorations.escape_markdown(f'{price:.2f}')} —Ä—É–±.`\n" # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
        f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{types.utils.markdown.text_decorations.escape_markdown(category_name)}`\n"
        f"**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:** `{types.utils.markdown.text_decorations.escape_markdown(manufacturer_name)}`\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ."
    )


    keyboard = [
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=CONFIRM_ACTION_CALLBACK)],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CANCEL_FSM_CALLBACK)],
    ]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    if isinstance(target, types.CallbackQuery):
         await target.message.edit_text(text, reply_markup=reply_markup, parse_mode="MarkdownV2")
    else:
         await target.answer(text, reply_markup=reply_markup, parse_mode="MarkdownV2") # unlikely to happen here

    await state.set_state(ProductAddFSM.confirm_add)


async def process_product_confirm_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (ADD FSM)."""
    await callback_query.answer()
    user_data = await state.get_data()
    name = user_data.get("name")
    description = user_data.get("description")
    price = user_data.get("price") # –≠—Ç–æ —É–∂–µ Decimal
    category_id = user_data.get("category_id")
    manufacturer_id = user_data.get("manufacturer_id")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ utils/db.py
    new_product = db.add_product(
        name=name,
        description=description,
        price=float(price), # db expects float or Decimal? db.py uses DECIMAL(10,2), should pass Decimal
        category_id=category_id,
        manufacturer_id=manufacturer_id
    )

    if new_product:
        await callback_query.message.edit_text(
            "üéâ **–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!** üéâ\n"
            f"**ID:** `{new_product.id}`\n"
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{types.utils.markdown.text_decorations.escape_markdown(new_product.name)}`"
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.**\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å, –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞." # TODO: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞?
        )

    await state.clear() # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
    await show_admin_main_menu_aiogram(callback_query, state)

# --- Router Registration ---
def register_product_add_handlers(router: Router):
    # ENTRY POINT
    router.callback_query.register(start_product_add, F.data == "product_add_action") # –ù–∞—á–∞–ª–æ FSM

    # Handlers for text/numeric inputs
    router.message.register(process_product_name, ProductAddFSM.waiting_for_name)
    router.message.register(process_product_description, ProductAddFSM.waiting_for_description)
    router.message.register(process_product_price, ProductAddFSM.waiting_for_price)

    # Handlers for category selection/pagination
    router.callback_query.register(
        process_product_category_selection_add,
        ProductAddFSM.waiting_for_category_selection,
        F.data.startswith(SELECT_PRODUCT_CATEGORY_CALLBACK_PREFIX_ADD) # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    )
    router.callback_query.register(
        process_product_category_pagination_add,
        ProductAddFSM.waiting_for_category_selection,
        F.data.startswith(f"{PAGINATION_CALLBACK_PREFIX}{PRODUCT_CATEGORY_PAGE_CALLBACK_PREFIX_ADD.strip(':')}") # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    )

    # Handlers for manufacturer selection/pagination
    router.callback_query.register(
        process_product_manufacturer_selection_add,
        ProductAddFSM.waiting_for_manufacturer_selection,
        F.data.startswith(SELECT_PRODUCT_MANUFACTURER_CALLBACK_PREFIX_ADD) # –í—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
    )
    router.callback_query.register(
        process_product_manufacturer_pagination_add,
        ProductAddFSM.waiting_for_manufacturer_selection,
        F.data.startswith(f"{PAGINATION_CALLBACK_PREFIX}{PRODUCT_MANUFACTURER_PAGE_CALLBACK_PREFIX_ADD.strip(':')}") # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    )

    # Confirmation handler
    router.callback_query.register(process_product_confirm_add, ProductAddFSM.confirm_add, F.data == CONFIRM_ACTION_CALLBACK)

    # –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

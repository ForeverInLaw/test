# your_bot/handlers/fsm/category_add_fsm.py
# FSM –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

import logging
import math
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from typing import Optional, Union

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
from utils import db

# –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö FSM —É—Ç–∏–ª–∏—Ç
from .fsm_utils import CANCEL_FSM_CALLBACK, CONFIRM_ACTION_CALLBACK, generate_pagination_keyboard, PAGINATION_CALLBACK_PREFIX

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# –ò—Å–ø–æ–ª—å–∑—É–µ–º PAGINATION_CALLBACK_PREFIX –∏–∑ fsm_utils + —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
CATEGORY_PAGE_CALLBACK_PREFIX_ADD = "add_cat_page:" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è ADD FSM
SELECT_PARENT_CATEGORY_CALLBACK_PREFIX_ADD = "add_cat_parent_sel:" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –≤—ã–±–æ—Ä–∞ –¥–ª—è ADD FSM

# –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_PAGE_SIZE_ADD = 10 # –ú–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç Update/List


# --- FSM States ---
class CategoryAddFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    waiting_for_name = State()
    waiting_for_parent_decision = State() # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞, –Ω—É–∂–Ω–∞ –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    waiting_for_parent_selection = State() # –ñ–¥–µ–º –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    confirm_add = State()

# --- Handlers ---
async def start_category_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    await callback_query.answer()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    await state.clear()
    await state.set_state(CategoryAddFSM.waiting_for_name)
    await callback_query.message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∫–æ–ª–±—ç–∫
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
    )

async def process_category_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    category_name = message.text.strip()
    if not category_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
        return
    # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ '–û—Ç–º–µ–Ω–∞' —Ç–µ–∫—Å—Ç? –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ CANCEL_FSM_CALLBACK

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º (–º–æ–∂–Ω–æ –∏ –Ω–∞ —à–∞–≥–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)

    await state.update_data(name=category_name)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    keyboard = [
        [types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_cat_parent_yes")],
        [types.InlineKeyboardButton(text="üö´ –ù–µ—Ç", callback_data="add_cat_parent_no")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CANCEL_FSM_CALLBACK)],
    ]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    await state.set_state(CategoryAddFSM.waiting_for_parent_decision)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ FSM
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{types.utils.markdown.text_decorations.escape_markdown(category_name)}`\n\n"
        "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é?",
        reply_markup=reply_markup,
        parse_mode="MarkdownV2"
    )

async def process_parent_decision_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    await callback_query.answer()
    decision = callback_query.data

    if decision == "add_cat_parent_no":
        await state.update_data(parent_id=None, parent_name="–ù–µ—Ç")
        await show_category_confirm_add(callback_query, state) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    elif decision == "add_cat_parent_yes":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        all_categories = db.get_all_categories()
        if not all_categories:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é
            await state.update_data(parent_id=None, parent_name="–ù–µ—Ç (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
            await callback_query.message.edit_text(
                "‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –µ—â–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é.\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è."
            )
            await show_category_confirm_add(callback_query, state)
            return

        # –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await state.update_data(available_categories_add=all_categories, parent_page_add=0)

        await state.set_state(CategoryAddFSM.waiting_for_parent_selection)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞
        await show_parent_category_selection_add(callback_query, state)
    else:
        await callback_query.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞', '–ù–µ—Ç' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        # –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è
        user_data = await state.get_data()
        keyboard = [
            [types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_cat_parent_yes")],
            [types.InlineKeyboardButton(text="üö´ –ù–µ—Ç", callback_data="add_cat_parent_no")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CANCEL_FSM_CALLBACK)],
        ]
        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback_query.message.edit_text(
             f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{types.utils.markdown.text_decorations.escape_markdown(user_data.get('name', 'N/A'))}`\n\n"
             "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n*–í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.*",
             reply_markup=reply_markup,
             parse_mode="MarkdownV2"
        )


async def show_parent_category_selection_add(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (ADD FSM)."""
    user_data = await state.get_data()
    categories = user_data.get("available_categories_add", [])
    current_page = user_data.get("parent_page_add", 0)

    if not categories:
        # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ process_parent_decision_add, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
         await state.update_data(parent_id=None, parent_name="–ù–µ—Ç (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
         text = "‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π.\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è."
         keyboard = [[types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="add_cat_continue_without_parent")]] # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–ª–±—ç–∫
         reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
         if isinstance(target, types.CallbackQuery):
             await target.message.edit_text(text, reply_markup=reply_markup)
         else: # –ù–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å Message, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
              await target.answer(text, reply_markup=reply_markup)
         await state.set_state(CategoryAddFSM.confirm_add) # –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
         return

    # Helper function to format item text for the button
    def format_category_button_text(category: db.Category) -> str:
        return f"üìÇ {category.name}"

    reply_markup = generate_pagination_keyboard(
        items=categories,
        current_page=current_page,
        page_size=CATEGORY_PAGE_SIZE_ADD,
        select_callback_prefix=SELECT_PARENT_CATEGORY_CALLBACK_PREFIX_ADD,
        pagination_callback_prefix=f"{PAGINATION_CALLBACK_PREFIX}{CATEGORY_PAGE_CALLBACK_PREFIX_ADD.strip(':')}:",
        item_text_func=format_category_button_text,
        item_id_func=lambda c: c.id
    )

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}):"

    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=reply_markup)
    else:
        await target.answer(text, reply_markup=reply_markup)

async def process_parent_category_selection_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: {prefix}{id} -> "add_cat_parent_sel:123"
    try:
        action, category_id_str = data.split(":")
        category_id = int(category_id_str)
    except ValueError:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ add FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        await show_parent_category_selection_add(callback_query, state)
        return


    selected_category = db.get_category_by_id(category_id)
    if not selected_category:
        await callback_query.message.answer("–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await show_parent_category_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
        return

    await state.update_data(parent_id=category_id, parent_name=selected_category.name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await show_category_confirm_add(callback_query, state)


async def process_parent_category_pagination_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (ADD FSM)."""
    await callback_query.answer()
    data = callback_query.data
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "page:{entity_prefix}:{page_number}" -> "page:add_cat_par:{page_number}"
    parts = data.split(":")
    if len(parts) != 3 or parts[0] != PAGINATION_CALLBACK_PREFIX.strip(':') or parts[1] != CATEGORY_PAGE_CALLBACK_PREFIX_ADD.strip(':'):
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ add FSM: {data}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        await show_parent_category_selection_add(callback_query, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞
        return


    new_page = int(parts[2])

    user_data = await state.get_data()
    categories = user_data.get("available_categories_add", [])
    total_pages = math.ceil(len(categories) / CATEGORY_PAGE_SIZE_ADD)

    if 0 <= new_page < total_pages:
        await state.update_data(parent_page_add=new_page)
        await show_parent_category_selection_add(callback_query, state)
    else:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")


async def show_category_confirm_add(target: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (ADD FSM)."""
    user_data = await state.get_data()
    name = user_data.get("name")
    parent_name = user_data.get("parent_name", "–ù–µ—Ç") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    text = (
        "‚ú® **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏** ‚ú®\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{types.utils.markdown.text_decorations.escape_markdown(name)}`\n"
        f"**–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:** `{types.utils.markdown.text_decorations.escape_markdown(parent_name)}`\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ."
    )

    keyboard = [
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=CONFIRM_ACTION_CALLBACK)],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CANCEL_FSM_CALLBACK)],
    ]
    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    if isinstance(target, types.CallbackQuery):
         await target.message.edit_text(text, reply_markup=reply_markup, parse_mode="MarkdownV2")
    else:
         await target.answer(text, reply_markup=reply_markup, parse_mode="MarkdownV2") # unlikely to happen here

    await state.set_state(CategoryAddFSM.confirm_add)


async def process_category_confirm_add(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (ADD FSM)."""
    await callback_query.answer()
    user_data = await state.get_data()
    name = user_data.get("name")
    parent_id = user_data.get("parent_id") # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ utils/db.py
    new_category = db.add_category(name=name, parent_id=parent_id)

    if new_category:
        await callback_query.message.edit_text(
            "üéâ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!** üéâ\n"
            f"**ID:** `{new_category.id}`\n"
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{types.utils.markdown.text_decorations.escape_markdown(new_category.name)}`"
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.**\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞."
        )

    await state.clear() # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    from ..admin_handlers_aiogram import show_admin_main_menu_aiogram
    await show_admin_main_menu_aiogram(callback_query, state)


# --- Router Registration ---
# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def register_category_add_handlers(router: Router):
    # ENTRY POINT: –ó–∞–ø—É—Å–∫ FSM –ø–æ –∫–æ–ª–±—ç–∫—É "–î–æ–±–∞–≤–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é" –∏–∑ –º–µ–Ω—é —Å—É—â–Ω–æ—Å—Ç–∏
    router.callback_query.register(start_category_add, F.callback_data == "category_add_action")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤ FSM
    router.message.register(process_category_name, CategoryAddFSM.waiting_for_name)
    router.callback_query.register(process_parent_decision_add, CategoryAddFSM.waiting_for_parent_decision)

    # –•—ç–Ω–¥–ª–µ—Ä—ã –≤—ã–±–æ—Ä–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    router.callback_query.register(
        process_parent_category_selection_add,
        CategoryAddFSM.waiting_for_parent_selection,
        F.data.startswith(SELECT_PARENT_CATEGORY_CALLBACK_PREFIX_ADD) # –í—ã–±–æ—Ä
    )
    router.callback_query.register(
        process_parent_category_pagination_add,
        CategoryAddFSM.waiting_for_parent_selection,
        F.data.startswith(f"{PAGINATION_CALLBACK_PREFIX}{CATEGORY_PAGE_CALLBACK_PREFIX_ADD.strip(':')}") # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    )
     # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ –Ω–∞—à–ª–æ—Å—å –∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    router.callback_query.register(show_category_confirm_add, CategoryAddFSM.waiting_for_parent_selection, F.callback_data == "add_cat_continue_without_parent")


    # –•—ç–Ω–¥–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    router.callback_query.register(process_category_confirm_add, CategoryAddFSM.confirm_add, F.callback_data == CONFIRM_ACTION_CALLBACK)

    # –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ –∏–ª–∏ –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
    # router.callback_query.register(cancel_fsm_handler, Text(CANCEL_FSM_CALLBACK), State("*"))

# your_bot/handlers/admin_stock_conversations.py
# ConversationHandler'—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤

import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from decimal import Decimal, InvalidOperation # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ —Å–ª—É—á–∞–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from .admin_constants import (
    ADMIN_STOCK_ADD, ADMIN_STOCK_FIND,
    ADMIN_BACK_STOCK_MENU, CONVERSATION_END,
    ADMIN_DETAIL_PREFIX, ADMIN_EDIT_PREFIX,
    ADMIN_STOCK_DELETE_CONFIRM,
    ADMIN_DELETE_EXECUTE_PREFIX
    # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
)
from .admin_menus import show_stock_menu, is_admin
# from .admin_menus import handle_stock_detail # –ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º, –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø–∏—Å–æ–∫


# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from utils import db

logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ ---
# Add/Update Stock States
(STOCK_OPERATION_PRODUCT_ID_STATE, STOCK_OPERATION_LOCATION_ID_STATE, STOCK_OPERATION_QUANTITY_STATE) = range(3) # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 0

# Find Stock States
(STOCK_FIND_PRODUCT_NAME_STATE, STOCK_FIND_LOCATION_NAME_STATE) = range(3, 5)

# Delete Stock States
(STOCK_DELETE_CONFIRM_STATE,) = range(5, 6)


# --- –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã ConversationHandler (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏) ---
async def cancel_stock_operation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ, –ø–æ–∏—Å–∫ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ)."""
    user_id = update.effective_user.id
    if not is_admin(user_id): return CONVERSATION_END

    # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'stock_item_data' in context.user_data:
        del context.user_data['stock_item_data']
    if 'stock_find_criteria' in context.user_data:
        del context.user_data['stock_find_criteria']
    if 'stock_to_delete_ids' in context.user_data:
         del context.user_data['stock_to_delete_ids']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    if update.callback_query:
        await update.callback_query.answer()
        try:
             await update.callback_query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception:
             chat_id = update.effective_chat.id
             await context.bot.send_message(chat_id=chat_id, text="–û–ø–µ—Ä–∞—Ü–∏—è —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif update.message:
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await show_stock_menu(update, context)
    return CONVERSATION_END

# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ ---

async def add_stock_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ENTRY_POINT –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID —Ç–æ–≤–∞—Ä–∞."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return CONVERSATION_END

    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ entry point –≤—ã–∑–≤–∞–Ω –∏–∑ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–µ—Ç–∞–ª–µ–π –æ—Å—Ç–∞—Ç–∫–∞
    # Callback —Ñ–æ—Ä–º–∞—Ç: admin_stock_detail_prodID_locID_edit_prodID_locID
    if ADMIN_EDIT_PREFIX in query.data:
        try:
             # –ü–∞—Ä—Å–∏–º ID —Ç–æ–≤–∞—Ä–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ callback_data: admin_stock_detail_prodID_locID_edit_prodID_locID
             # –ù–∞–º –Ω—É–∂–Ω—ã ID –ø–æ—Å–ª–µ _edit_
             parts = query.data.split(ADMIN_EDIT_PREFIX)
             ids_str = parts[-1] # product_id_location_id
             ids = ids_str.split('_')
             if len(ids) == 2:
                  product_id = int(ids[0])
                  location_id = int(ids[1])
                  logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∏–∑ –¥–µ—Ç–∞–ª–µ–π. Product ID: {product_id}, Location ID: {location_id}")

                  # –ü—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
                  if query.message:
                       try:
                           await query.message.edit_reply_markup(reply_markup=None)
                       except Exception:
                           logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ add_stock_entry (edit)")

                  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                  existing_stock = db.get_stock_by_ids(product_id, location_id)
                  if not existing_stock:
                       await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID `{product_id}` –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ID `{location_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                       await show_stock_menu(update, context)
                       return CONVERSATION_END

                  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                  context.user_data['stock_item_data'] = {
                       'product_id': product_id,
                       'location_id': location_id,
                       'original_quantity': existing_stock.quantity # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                  }

                  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                  session = db.SessionLocal()
                  try:
                      product = session.query(db.Product).get(product_id)
                      location = session.query(db.Location).get(location_id)
                      product_name = product.name if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
                      location_name = location.name if location else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
                      context.user_data['stock_item_data']['product_name'] = product_name
                      context.user_data['stock_item_data']['location_name'] = location_name
                  except Exception as e:
                       logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ prodID={product_id}, locID={location_id} –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)
                       context.user_data['stock_item_data']['product_name'] = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞'
                       context.user_data['stock_item_data']['location_name'] = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–∏'
                  finally:
                       session.close()

                  await context.bot.send_message( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. —Å—Ç–∞—Ä–æ–µ –º–æ–≥–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      chat_id=update.effective_chat.id,
                      text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞:\n\n"
                           f"üì¶ –¢–æ–≤–∞—Ä: *{context.user_data['stock_item_data']['product_name']}* (ID: `{product_id}`)\n"
                           f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: *{context.user_data['stock_item_data']['location_name']}* (ID: `{location_id}`)\n"
                           f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{existing_stock.quantity}`\n\n"
                           "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ* –æ—Å—Ç–∞—Ç–∫–∞ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):",
                      parse_mode='Markdown'
                  )

                  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                  return STOCK_OPERATION_QUANTITY_STATE

             else:
                  logger.error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ID –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –∏–∑ edit callback: {query.data}")
                  await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.")
                  await show_stock_menu(update, context)
                  return CONVERSATION_END

        except (ValueError, IndexError) as e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID –æ—Å—Ç–∞—Ç–∫–∞ –∏–∑ edit callback: {query.data}", exc_info=True)
             await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.")
             await show_stock_menu(update, context)
             return CONVERSATION_END
        except Exception as e:
             logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –∏–∑ –¥–µ—Ç–∞–ª–µ–π: {e}", exc_info=True)
             await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.")
             await show_stock_menu(update, context)
             return CONVERSATION_END


    # –ï—Å–ª–∏ entry point –≤—ã–∑–≤–∞–Ω –∏–∑ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫" –≤ –º–µ–Ω—é
    if query.message:
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except Exception:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ add_stock_entry (menu)")

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.\n"
             "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel\n\n"
             "–í–≤–µ–¥–∏—Ç–µ *ID —Ç–æ–≤–∞—Ä–∞*:",
        parse_mode='Markdown'
    )
    context.user_data['stock_item_data'] = {}
    return STOCK_OPERATION_PRODUCT_ID_STATE


async def handle_stock_operation_product_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ (Add/Update)."""
    product_id_text = update.message.text.strip()
    try:
        product_id = int(product_id_text)
        product = db.get_product_by_id(product_id)

        if product:
            context.user_data['stock_item_data']['product_id'] = product_id
            context.user_data['stock_item_data']['product_name'] = product.name

            await update.message.reply_text(
                f"–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: *{product.name}*.\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è*:",
                parse_mode='Markdown'
            )
            return STOCK_OPERATION_LOCATION_ID_STATE
        else:
            await update.message.reply_text(
                f"–¢–æ–≤–∞—Ä —Å ID `{product_id_text}` –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π *ID —Ç–æ–≤–∞—Ä–∞*:",
                 parse_mode='Markdown'
            )
            return STOCK_OPERATION_PRODUCT_ID_STATE

    except ValueError:
        await update.message.reply_text("ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π *ID —Ç–æ–≤–∞—Ä–∞*:", parse_mode='Markdown')
        return STOCK_OPERATION_PRODUCT_ID_STATE
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID {product_id_text} –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º: {e}", exc_info=True)
         await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞.")
         await cancel_stock_operation(update, context)
         return CONVERSATION_END


async def handle_stock_operation_location_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ (Add/Update)."""
    location_id_text = update.message.text.strip()
    try:
        location_id = int(location_id_text)
        location = db.get_location_by_id(location_id)

        if location:
            context.user_data['stock_item_data']['location_id'] = location_id
            context.user_data['stock_item_data']['location_name'] = location.name

            await update.message.reply_text(
                f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: *{location.name}*.\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–∞* (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):",
                parse_mode='Markdown'
            )
            return STOCK_OPERATION_QUANTITY_STATE
        else:
            await update.message.reply_text(
                f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å ID `{location_id_text}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π *ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è*:",
                parse_mode='Markdown'
            )
            return STOCK_OPERATION_LOCATION_ID_STATE

    except ValueError:
        await update.message.reply_text("ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π *ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è*:", parse_mode='Markdown')
        return STOCK_OPERATION_LOCATION_ID_STATE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ ID {location_id_text} –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")
        await cancel_stock_operation(update, context)
        return CONVERSATION_END


async def handle_stock_operation_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞."""
    quantity_text = update.message.text.strip()
    try:
        quantity = int(quantity_text)
        if quantity < 0:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–∞*:", parse_mode='Markdown')
            return STOCK_OPERATION_QUANTITY_STATE

        stock_data = context.user_data.get('stock_item_data')
        if not stock_data or 'product_id' not in stock_data or 'location_id' not in stock_data:
             await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã.")
             await show_stock_menu(update, context)
             return CONVERSATION_END

        product_id = stock_data['product_id']
        location_id = stock_data['location_id']
        product_name = stock_data.get('product_name', 'N/A')
        location_name = stock_data.get('location_name', 'N/A')

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            existing_stock = db.get_stock_by_ids(product_id, location_id)

            if existing_stock:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                updated_stock = db.update_stock_quantity(product_id, location_id, quantity)
                if updated_stock:
                    await update.message.reply_text(
                        f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ *{product_name}* "
                        f"–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ *{location_name}* "
                        f"—É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{updated_stock.quantity}`.",
                        parse_mode='Markdown'
                    )
                else:
                     # db.update_stock_quantity —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É
                     await update.message.reply_text(
                         f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ *{product_name}* "
                         f"–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ *{location_name}*.",
                         parse_mode='Markdown'
                    )
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 0 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                if quantity > 0:
                    added_stock = db.add_stock(product_id, location_id, quantity)
                    if added_stock:
                        await update.message.reply_text(
                            f"‚úÖ –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ *{product_name}* "
                            f"–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ *{location_name}* "
                            f"—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{added_stock.quantity}`.",
                             parse_mode='Markdown'
                        )
                    else:
                        # db.add_stock —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É
                        await update.message.reply_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ *{product_name}* "
                            f"–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ *{location_name}*.",
                            parse_mode='Markdown'
                       )
                else: # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 0, –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                     await update.message.reply_text(
                        f"–û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ *{product_name}* –≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ *{location_name}* –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. "
                        "–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0. –ó–∞–ø–∏—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                        parse_mode='Markdown'
                   )


        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞ –≤ DB (product_id={product_id}, location_id={location_id}, quantity={quantity}): {e}", exc_info=True)
             await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ—Å—Ç–∞—Ç–∫–æ–º.")


        if 'stock_item_data' in context.user_data:
            del context.user_data['stock_item_data']

        await show_stock_menu(update, context)
        return CONVERSATION_END

    except ValueError:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ*:", parse_mode='Markdown')
        return STOCK_OPERATION_QUANTITY_STATE
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞—Ç–∫–∞ '{quantity_text}': {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        await cancel_stock_operation(update, context)
        return CONVERSATION_END


# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –ü–æ–∏—Å–∫ –æ—Å—Ç–∞—Ç–∫–∞ ---

async def find_stock_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ENTRY_POINT –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return CONVERSATION_END

    query = update.callback_query
    await query.answer()

    if query.message:
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except Exception:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ find_stock_entry")


    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞.\n"
             "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel\n\n"
             "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞* –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –≤–≤–µ–¥—è '-') –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        parse_mode='Markdown'
    )
    context.user_data['stock_find_criteria'] = {}

    return STOCK_FIND_PRODUCT_NAME_STATE # –ü–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞


async def handle_stock_find_product_name_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (—à–∞–≥ 1)."""
    product_query = update.message.text.strip()
    if product_query == '-':
        product_query = None # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥

    context.user_data['stock_find_criteria']['product_name_query'] = product_query

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è* –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –≤–≤–µ–¥—è '-') –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        parse_mode='Markdown'
    )
    return STOCK_FIND_LOCATION_NAME_STATE # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∏—Å–∫–∞


async def handle_stock_find_location_name_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ (—à–∞–≥ 2)."""
    location_query = update.message.text.strip()
    if location_query == '-':
        location_query = None # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥

    context.user_data['stock_find_criteria']['location_name_query'] = location_query

    product_name_query = context.user_data['stock_find_criteria'].get('product_name_query')
    location_name_query = context.user_data['stock_find_criteria'].get('location_name_query')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–≤–µ–¥–µ–Ω –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π?
    if not product_name_query and not location_name_query:
         await update.message.reply_text("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞.")
         # –û—á–∏—â–∞–µ–º user_data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
         if 'stock_find_criteria' in context.user_data: del context.user_data['stock_find_criteria']
         await show_stock_menu(update, context)
         return CONVERSATION_END

    try:
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–∑ utils.db
        results = db.find_stock(product_name_query=product_name_query, location_name_query=location_name_query)

        response_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–¢–æ–≤–∞—Ä: '{product_name_query or "–ª—é–±–æ–π"}', –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: '{location_name_query or "–ª—é–±–æ–µ"}'):\n\n"
        if results:
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π, –Ω—É–∂–Ω–æ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã Product –∏ Location
            session = db.SessionLocal()
            try:
                for item in results:
                     # –ò—Å–ø–æ–ª—å–∑—É–µ–º scalar() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                     product_name = session.query(db.Product.name).filter_by(id=item.product_id).scalar() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
                     location_name = session.query(db.Location.name).filter_by(id=item.location_id).scalar() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
                     response_text += f"üì¶ –¢–æ–≤–∞—Ä ID `{item.product_id}` (*{product_name}*)\n" \
                                      f"  üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ID `{item.location_id}` (*{location_name}*)\n" \
                                      f"  üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{item.quantity}`\n\n"
            except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø–æ–∏—Å–∫–µ: {e}", exc_info=True)
                 response_text += "\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
            finally:
                session.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        else:
            response_text += "–û—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        await update.message.reply_text(response_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ db.find_stock (—Ç–æ–≤–∞—Ä: '{product_name_query}', –ª–æ–∫–∞—Ü–∏—è: '{location_name_query}'): {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤.")

    # –û—á–∏—â–∞–µ–º user_data
    if 'stock_find_criteria' in context.user_data:
        del context.user_data['stock_find_criteria']

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –æ—Å—Ç–∞—Ç–∫–æ–≤
    await show_stock_menu(update, context)
    return CONVERSATION_END


# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ ---

async def delete_stock_confirm_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ENTRY_POINT –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return CONVERSATION_END

    query = update.callback_query
    await query.answer()

    try:
        # –ü–∞—Ä—Å–∏–º ID —Ç–æ–≤–∞—Ä–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ callback_data: admin_stock_detail_prodID_locID_delete_confirm_prodID_locID
        # –ù–∞–º –Ω—É–∂–Ω—ã ID –ø–æ—Å–ª–µ ADMIN_DELETE_CONFIRM_PREFIX
        parts = query.data.split(ADMIN_DELETE_CONFIRM_PREFIX)
        ids_str = parts[-1] # product_id_location_id
        ids = ids_str.split('_')
        if len(ids) == 2:
             product_id = int(ids[0])
             location_id = int(ids[1])
             context.user_data['stock_to_delete_ids'] = (product_id, location_id) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞

             # –ü—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
             if query.message:
                  try:
                      await query.message.edit_reply_markup(reply_markup=None)
                  except Exception:
                       logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ delete_stock_confirm_entry")

             # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
             stock_item = db.get_stock_by_ids(product_id, location_id)
             if not stock_item:
                  await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –û—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID `{product_id}` –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ID `{location_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –æ—Å—Ç–∞—Ç–∫–æ–≤
                  await show_stock_menu(update, context)
                  return CONVERSATION_END

             # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
             session = db.SessionLocal()
             try:
                 product = session.query(db.Product).get(product_id)
                 location = session.query(db.Location).get(location_id)
                 product_name = product.name if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
                 location_name = location.name if location else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
             except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ prodID={product_id}, locID={location_id} –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}", exc_info=True)
                 product_name = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞'
                 location_name = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–∏'
             finally:
                 session.close()


             confirmation_text = (
                 f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–µ?\n\n"
                 f"üì¶ –¢–æ–≤–∞—Ä: *{product_name}* (ID: `{product_id}`)\n"
                 f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: *{location_name}* (ID: `{location_id}`)\n"
                 f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{stock_item.quantity}`"
             )

             # Callback –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä—É–µ—Ç –æ–±–∞ ID: entity{ADMIN_DELETE_EXECUTE_PREFIX}ID1_ID2
             # entity "stock" –∂–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω –≤ –∫–æ–ª–±—ç–∫–µ
             execute_callback_data = f"stock{ADMIN_DELETE_EXECUTE_PREFIX}{product_id}_{location_id}"
             keyboard = InlineKeyboardMarkup([
                 [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=execute_callback_data)],
                 [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=ADMIN_BACK_STOCK_MENU)] # –û—Ç–º–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –æ—Å—Ç–∞—Ç–∫–æ–≤
             ])

             # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
             await query.edit_message_text(confirmation_text, reply_markup=keyboard, parse_mode='Markdown')

             return STOCK_DELETE_CONFIRM_STATE # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        else:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ID –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –∏–∑ delete confirm callback: {query.data}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.")
            await show_stock_menu(update, context)
            return CONVERSATION_END

    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID –æ—Å—Ç–∞—Ç–∫–∞ –∏–∑ delete confirm callback: {query.data}", exc_info=True)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.")
        await show_stock_menu(update, context)
        return CONVERSATION_END
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é –æ—Å—Ç–∞—Ç–∫–∞.")
        await show_stock_menu(update, context)
        return CONVERSATION_END


async def handle_stock_delete_execute(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—Ç–∫–∞ –∏–∑ –ë–î."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return CONVERSATION_END

    query = update.callback_query
    await query.answer()

    product_id, location_id = None, None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞

    try:
        # –ü–∞—Ä—Å–∏–º ID —Ç–æ–≤–∞—Ä–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ callback_data: stock_delete_execute_prodID_locID
        parts = query.data.split(ADMIN_DELETE_EXECUTE_PREFIX)
        ids_str = parts[-1] # product_id_location_id
        ids = ids_str.split('_')
        if len(ids) == 2:
             product_id = int(ids[0])
             location_id = int(ids[1])

             # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ ID —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
             # saved_ids = context.user_data.get('stock_to_delete_ids')
             # if saved_ids is None or saved_ids != (product_id, location_id):
             #      logger.error(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ({saved_ids}) –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö ({product_id}, {location_id}) ID –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.")
             #      await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è.")
             #      await show_stock_menu(update, context)
             #      # –û—á–∏—â–∞–µ–º user_data
             #      if 'stock_to_delete_ids' in context.user_data: del context.user_data['stock_to_delete_ids']
             #      return CONVERSATION_END


             # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
             try:
                  await query.edit_message_reply_markup(reply_markup=None)
             except Exception:
                  logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞")


             # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ utils.db
             success = db.delete_stock(product_id, location_id)

             if success:
                 await query.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞—Ç–∫–∞ (–¢–æ–≤–∞—Ä ID `{product_id}`, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ID `{location_id}`) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
             else:
                  # db.delete_stock —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É
                  await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞—Ç–∫–∞ (–¢–æ–≤–∞—Ä ID `{product_id}`, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ID `{location_id}`). –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        else:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ID –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –∏–∑ delete execute callback: {query.data}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.")


    except (ValueError, IndexError) as e:
         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID –æ—Å—Ç–∞—Ç–∫–∞ –∏–∑ delete execute callback: {query.data}", exc_info=True)
         await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.")
    except Exception as e:
         logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ (prodID={product_id}, locID={location_id}): {e}", exc_info=True)
         await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞.")

    # –û—á–∏—â–∞–µ–º user_data
    if 'stock_to_delete_ids' in context.user_data:
         del context.user_data['stock_to_delete_ids']

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –æ—Å—Ç–∞—Ç–∫–æ–≤
    await show_stock_menu(update, context)
    return CONVERSATION_END


# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ConversationHandler'–æ–≤ –¥–ª—è –û—Å—Ç–∞—Ç–∫–æ–≤ ---

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è entry_points –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞
# –ò–∑ –º–µ–Ω—é: ^admin_stock_add$
# –ò–∑ –¥–µ—Ç–∞–ª–µ–π: ^admin_stock_detail_prodID_locID_edit_prodID_locID$
add_stock_conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(add_stock_entry, pattern=f'^{ADMIN_STOCK_ADD}$'),
        CallbackQueryHandler(add_stock_entry, pattern=f'^{ADMIN_STOCK_DETAIL}\d+_\d+{ADMIN_EDIT_PREFIX}\d+_\d+$')
    ],
    states={
        STOCK_OPERATION_PRODUCT_ID_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_stock_operation_product_id)],
        STOCK_OPERATION_LOCATION_ID_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_stock_operation_location_id)],
        STOCK_OPERATION_QUANTITY_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_stock_operation_quantity)],
    },
    fallbacks=[
        CallbackQueryHandler(cancel_stock_operation, pattern=f'^{ADMIN_BACK_STOCK_MENU}$'),
        CommandHandler("cancel", cancel_stock_operation),
        MessageHandler(filters.TEXT & ~filters.COMMAND, cancel_stock_operation)
    ],
    map_to_parent={
        CONVERSATION_END: CONVERSATION_END
    },
    allow_reentry=True
)

find_stock_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(find_stock_entry, pattern=f'^{ADMIN_STOCK_FIND}$')],
    states={
        STOCK_FIND_PRODUCT_NAME_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_stock_find_product_name_step)],
        STOCK_FIND_LOCATION_NAME_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_stock_find_location_name_step)],
    },
    fallbacks=[
        CallbackQueryHandler(cancel_stock_operation, pattern=f'^{ADMIN_BACK_STOCK_MENU}$'),
        CommandHandler("cancel", cancel_stock_operation),
        MessageHandler(filters.TEXT & ~filters.COMMAND, cancel_stock_operation)
    ],
     map_to_parent={
        CONVERSATION_END: CONVERSATION_END
    },
    allow_reentry=True
)

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è entry_points —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞
# –° –¥–µ—Ç–∞–ª–µ–π: ^admin_stock_detail_prodID_locID_delete_confirm_prodID_locID$
delete_stock_conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(delete_stock_confirm_entry, pattern=f'^{ADMIN_STOCK_DETAIL}\d+_\d+{ADMIN_DELETE_CONFIRM_PREFIX}\d+_\d+$')
    ],
    states={
        STOCK_DELETE_CONFIRM_STATE: [
             # Callback –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: entity{ADMIN_DELETE_EXECUTE_PREFIX}ID1_ID2
             # entity "stock" –∂–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω –≤ –∫–æ–ª–±—ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–î–∞, —É–¥–∞–ª–∏—Ç—å"
             CallbackQueryHandler(handle_stock_delete_execute, pattern=f'^stock{ADMIN_DELETE_EXECUTE_PREFIX}\d+_\d+$'), # –ö–Ω–æ–ø–∫–∞ "–î–∞, —É–¥–∞–ª–∏—Ç—å"
             CallbackQueryHandler(cancel_stock_operation, pattern=f'^{ADMIN_BACK_STOCK_MENU}$') # –ö–Ω–æ–ø–∫–∞ "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞"
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_stock_operation),
        MessageHandler(filters.TEXT & ~filters.COMMAND, cancel_stock_operation)
    ],
    map_to_parent={
        CONVERSATION_END: CONVERSATION_END
    },
    allow_reentry=True
)

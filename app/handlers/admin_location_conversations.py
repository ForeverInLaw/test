# your_bot/handlers/admin_location_conversations.py
# ConversationHandler'—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –ø–æ–∏—Å–∫–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π

import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from .admin_constants import (
    ADMIN_LOCATIONS_ADD, ADMIN_LOCATIONS_FIND, ADMIN_LOCATIONS_UPDATE,
    ADMIN_BACK_LOCATIONS_MENU, CONVERSATION_END,
    ADMIN_DETAIL_PREFIX, ADMIN_EDIT_PREFIX,
    ADMIN_LOCATIONS_DELETE_CONFIRM,
    ADMIN_DELETE_EXECUTE_PREFIX
    # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
)
from .admin_menus import show_locations_menu, is_admin
# from .admin_menus import handle_locations_detail # –ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º, –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø–∏—Å–æ–∫


# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from utils import db

logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π ---
# Add Location States
(LOCATION_ADD_NAME_STATE,) = range(1)

# Find Location States
(LOCATION_FIND_QUERY_STATE,) = range(1, 2)

# Update Location States
(LOCATION_UPDATE_ID_STATE, LOCATION_UPDATE_NAME_STATE) = range(2, 4)

# Delete Location States
(LOCATION_DELETE_CONFIRM_STATE,) = range(4, 5)


# --- –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã ConversationHandler (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏) ---
async def cancel_location_operation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–∏—Å–∫, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ)."""
    user_id = update.effective_user.id
    if not is_admin(user_id): return CONVERSATION_END

    if 'new_location' in context.user_data:
        del context.user_data['new_location']
    if 'updated_location_data' in context.user_data:
        del context.user_data['updated_location_data']
    if 'location_to_delete_id' in context.user_data:
         del context.user_data['location_to_delete_id']


    if update.callback_query:
        await update.callback_query.answer()
        try:
             await update.callback_query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception:
             chat_id = update.effective_chat.id
             await context.bot.send_message(chat_id=chat_id, text="–û–ø–µ—Ä–∞—Ü–∏—è —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif update.message:
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await show_locations_menu(update, context)
    return CONVERSATION_END


# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ---

async def add_location_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ENTRY_POINT –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return CONVERSATION_END

    query = update.callback_query
    await query.answer()

    if query.message:
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except Exception:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ add_location_entry")


    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n"
             "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel\n\n"
             "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
        parse_mode='Markdown'
    )
    return LOCATION_ADD_NAME_STATE

async def handle_location_name_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ."""
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", parse_mode='Markdown')
        return LOCATION_ADD_NAME_STATE # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    try:
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑ utils.db
        added_location = db.add_location(name=name)

        if added_location:
            await update.message.reply_text(f"‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ '{added_location.name}' (ID: {added_location.id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
             # db.add_location —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É
             await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è '{name}'. –í–æ–∑–º–æ–∂–Ω–æ, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ db.add_location: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")

    await show_locations_menu(update, context)
    return CONVERSATION_END

# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –ü–æ–∏—Å–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ---

async def find_location_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ENTRY_POINT –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return CONVERSATION_END

    query = update.callback_query
    await query.answer()

    if query.message:
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except Exception:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ find_location_entry")


    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n"
             "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel\n\n"
             "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        parse_mode='Markdown'
    )
    return LOCATION_FIND_QUERY_STATE

async def handle_location_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫."""
    query_text = update.message.text.strip()
    if not query_text:
         await update.message.reply_text("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:", parse_mode='Markdown')
         return LOCATION_FIND_QUERY_STATE

    try:
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–∑ utils.db
        results = db.find_locations_by_name(query_text)

        response_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query_text}':\n\n"
        if results:
            for loc in results:
                 response_text += f"üìç ID: `{loc.id}`\n" \
                                  f"  –ù–∞–∑–≤–∞–Ω–∏–µ: *{loc.name}*\n\n"
        else:
            response_text += "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        await update.message.reply_text(response_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ db.find_locations_by_name: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π.")

    await show_locations_menu(update, context)
    return CONVERSATION_END

# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ---

async def update_location_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ENTRY_POINT –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return CONVERSATION_END

    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ entry point –≤—ã–∑–≤–∞–Ω –∏–∑ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–µ—Ç–∞–ª–µ–π
    # Callback —Ñ–æ—Ä–º–∞—Ç: admin_locations_detail_ID_edit_ID
    if ADMIN_EDIT_PREFIX in query.data:
         try:
             # –ü–∞—Ä—Å–∏–º ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–∑ callback_data
             parts = query.data.split(ADMIN_EDIT_PREFIX)
             location_id_str = parts[-1]
             location_id = int(location_id_str)
             logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–∑ –¥–µ—Ç–∞–ª–µ–π. ID: {location_id}")

             # –ü—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
             if query.message:
                  try:
                      await query.message.edit_reply_markup(reply_markup=None)
                  except Exception:
                       logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ update_location_entry")


             # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
             temp_message = type('obj', (object,), {'text': str(location_id), 'from_user': update.effective_user, 'chat': update.effective_chat})()
             temp_update = type('obj', (object,), {'message': temp_message, 'effective_user': update.effective_user, 'effective_chat': update.effective_chat, 'callback_query': None})()
             return await handle_location_update_id(temp_update, context)

         except (ValueError, IndexError) as e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–∑ edit callback: {query.data}", exc_info=True)
             await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
             await show_locations_menu(update, context)
             return CONVERSATION_END
         except Exception as e:
              logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –¥–µ—Ç–∞–ª–µ–π: {e}", exc_info=True)
              await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
              await show_locations_menu(update, context)
              return CONVERSATION_END


    # –ï—Å–ª–∏ entry point –≤—ã–∑–≤–∞–Ω –∏–∑ –º–µ–Ω—é
    if query.message:
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except Exception:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ update_location_entry")


    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n"
             "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel\n\n"
             "–í–≤–µ–¥–∏—Ç–µ *ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è*, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:",
        parse_mode='Markdown'
    )
    context.user_data['updated_location_data'] = {}
    return LOCATION_UPDATE_ID_STATE

async def handle_location_update_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    location_id_text = update.message.text.strip()
    try:
        location_id = int(location_id_text)
        location = db.get_location_by_id(location_id)

        if location:
            context.user_data['updated_location_data']['id'] = location_id
            context.user_data['updated_location_data']['original_name'] = location.name

            summary = (
                f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ID `{location.id}`: *{location.name}*.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –≤–≤–µ–¥—è '='):" # –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            )
            await update.message.reply_text(summary, parse_mode='Markdown')

            return LOCATION_UPDATE_NAME_STATE
        else:
            await update.message.reply_text(
                f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å ID `{location_id_text}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π *ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è* –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
                parse_mode='Markdown'
            )
            return LOCATION_UPDATE_ID_STATE

    except ValueError:
        await update.message.reply_text("ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π *ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è*:", parse_mode='Markdown')
        return LOCATION_UPDATE_ID_STATE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ ID {location_id_text} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")
        await cancel_location_operation(update, context)
        return CONVERSATION_END


async def handle_location_update_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."""
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –≤–≤–µ–¥—è '='):", parse_mode='Markdown')
        return LOCATION_UPDATE_NAME_STATE

    location_id_to_update = context.user_data['updated_location_data'].get('id')
    if not location_id_to_update:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        if 'updated_location_data' in context.user_data: del context.user_data['updated_location_data']
        await show_locations_menu(update, context)
        return CONVERSATION_END

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª '=', –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if name == '=':
         new_name = context.user_data['updated_location_data'].get('original_name')
         await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    else:
         new_name = name

    try:
        update_data = {'name': new_name}
        updated_location = db.update_location(location_id_to_update, update_data)

        if updated_location:
            await update.message.reply_text(f"‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ID `{location_id_to_update}` —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *{updated_location.name}*", parse_mode='Markdown')
        else:
             # db.update_location —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É
             await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ID `{location_id_to_update}`. –í–æ–∑–º–æ–∂–Ω–æ, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ db.update_location –¥–ª—è ID {location_id_to_update}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")

    if 'updated_location_data' in context.user_data:
        del context.user_data['updated_location_data']

    await show_locations_menu(update, context)
    return CONVERSATION_END


# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ---

async def delete_location_confirm_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ENTRY_POINT –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return CONVERSATION_END

    query = update.callback_query
    await query.answer()

    try:
        # –ü–∞—Ä—Å–∏–º ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–∑ callback_data: admin_locations_detail_ID_delete_confirm_ID
        # ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –ø–æ—Å–ª–µ ADMIN_DELETE_CONFIRM_PREFIX
        parts = query.data.split(ADMIN_DELETE_CONFIRM_PREFIX)
        location_id_str = parts[-1]
        location_id = int(location_id_str)
        context.user_data['location_to_delete_id'] = location_id

        # –ü—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
        if query.message:
             try:
                 await query.message.edit_reply_markup(reply_markup=None)
             except Exception:
                  logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ delete_location_confirm_entry")


        location = db.get_location_by_id(location_id)
        if not location:
             await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å ID `{location_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
             await show_locations_menu(update, context)
             return CONVERSATION_END


        confirmation_text = (
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?\n\n"
            f"üìç ID: `{location.id}`\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{location.name}*\n\n"
            f"*–í–ù–ò–ú–ê–ù–ò–ï:* –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤!" # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–≤—è–∑—è—Ö
        )

        # Callback –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: entity{ADMIN_DELETE_EXECUTE_PREFIX}ID
        # entity "location" –∂–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"location{ADMIN_DELETE_EXECUTE_PREFIX}{location_id}")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=ADMIN_BACK_LOCATIONS_MENU)] # –û—Ç–º–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π
        ])

        await query.edit_message_text(confirmation_text, reply_markup=keyboard, parse_mode='Markdown')

        return LOCATION_DELETE_CONFIRM_STATE

    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–∑ delete confirm callback: {query.data}", exc_info=True)
        await query.edit_